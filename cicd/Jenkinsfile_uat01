pipeline {

    agent any

    //     docker {   
    //         image 'node:16.18.1'
    //     }  

    // triggers {
    //     cron '''TZ=Australia/Sydney
    //     H H(9-17)/3 * * 1-7'''
    // }

    environment {
        ENVIRONMENT = 'uat'
        BRANCH_UAT = 'dev'
        AWS_REGION = 'us-east-1'
        ECR_REPO = 'pn-server'
        COMMIT_HASH = 'latest'
        ECR_URL = '017359606234.dkr.ecr.us-east-1.amazonaws.com/pn-server:latest'
        TASK_DEFINITION = 'petServer'
        WORKSPACE_PATH = '/home/root/jenkins_home/workspace/test-getrepo/build'
    }

    //options {
        //maximum archieved artifacts
       // echo "set log rotation"
    //}



    stages {
        stage('login to ECR') {
            steps {
                echo "Login to ECR"
                withAWS(credentials: 'ec2', region: 'us-east-1') {
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 017359606234.dkr.ecr.us-east-1.amazonaws.com'
                }
            }
        
        }
        stage('Build and Push Docker Image') {
            steps {               
                echo "Build Docker images"
                sh 'docker build -t ${ECR_REPO}:${COMMIT_HASH} .'

                echo "Tag Docker images"
                sh 'docker tag ${ECR_REPO}:${COMMIT_HASH} ${ECR_URL}'

                echo "Push image to ECR"
                sh 'docker push ${ECR_URL}'
            }
        }



        
        // stage('Build') {
        //     steps {
        //         echo "Building"
        //         sh 'npm run build'
        //     }
        // }
        
        // stage('Test') {
        //     steps {
        //         echo "testing"
        //     }
        // }
        
        // stage('Install AWS CLI') {
        //     steps {
        //         echo "Installing AWS CLI"
        //         //delete aws version checking
        //         //sh 'aws --version'
        //         sh 'apt-get update'
        //         sh 'apt install python3-pip -y'
        //         sh 'pip3 install awscli --upgrade'
        //     }
        // }
        
        //  stage('Deploy to UAT') {
        //     steps {
        //         echo "Deploy to UAT"
        //         deployToS3(ENVIRONMENT)
        //     }
        // }
        
    }

    post {
    
        always {
        cleanWs()
				sh 'ls -la'
        }
        
        success{
            echo "In post-success"
        }
        failure {
            echo "In post-failure"

        }
    }
}